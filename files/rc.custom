#!/usr/bin/env bash
# PrivateRouter rc.custom for keeping everything up to date

# Source our base OpenWRT functions
. /lib/functions.sh

# Log to the system log and echo if needed
log_say()
{
    SCRIPT_NAME=$(basename "$0")
    echo "${SCRIPT_NAME}: ${1}"
    logger "${SCRIPT_NAME}: ${1}"
    echo "${SCRIPT_NAME}: ${1}" >> "/tmp/${SCRIPT_NAME}.log"
}

# Get the name of the script without the path
SCRIPT_NAME=$(basename "$0")

# Count the number of running instances of the script (excluding the current one)
NUM_INSTANCES=$(pgrep -f "${SCRIPT_NAME}" | grep -v "$$" | wc -l)

# If more than one instance is found, exit
if [ "$NUM_INSTANCES" -gt 1 ]; then
    log_say "${SCRIPT_NAME} is already running, exiting."
    exit 1
fi

# Command to wait for Internet connection
wait_for_internet() {
    while ! ping -q -c3 1.1.1.1 >/dev/null 2>&1; do
        log_say "Waiting for Internet connection..."
        sleep 1
    done
    log_say "Internet connection established"
}

# Wait for Internet connection
wait_for_internet

# Force source our REPO variable from /root/.profile
# This way it proliferates into all other scripts this one sources
. /root/.profile

log_say "***[ REPO is set to: ${REPO} ]***"

# If nothing is set for REPO we set it to main
if [ -z "${REPO}" ]; then
    log_say "REPO is not set, setting to main"
    REPO="main"
fi

log_say "Fixing DNS (if needed) and installing required packages for opkg"

# Perform the DNS resolution check
if ! nslookup "privaterouter.com" >/dev/null 2>&1; then
    log_say "Domain resolution failed. Setting DNS server to \"1.1.1.1\"."

    # Update resolv.conf with the new DNS server
    echo "nameserver 1.1.1.1" > /etc/resolv.conf
else
    log_say "Domain resolution successful."
fi

# ----------------------- BEGIN RC.CUSTOM UPDATER

# Check if there is an update to our rc.custom updater script
log_say "Beginning script-repo up to date check"

HASH_STORE="/etc/config/.script-repo"
UPDATE_NEEDED="0"

CURRENT_HASH=$(
    curl \
        --silent "https://api.github.com/repos/PrivateRouter-LLC/script-repo/commits/${REPO}" | \
        jq --raw-output '.sha'
)

if [ -f "${HASH_STORE}" ] && [ ! -z "${CURRENT_HASH}" ]; then
    log_say "Script Repo Updater Found ${HASH_STORE}"
    CHECK_HASH=$(cat ${HASH_STORE})
    log_say "Script Repo Updater Check Hash ${CHECK_HASH}"
    if [ "${CHECK_HASH}" != "${CURRENT_HASH}" ] && [ ! -z "${CHECK_HASH}" ]; then
        log_say "Script Repo ${CHECK_HASH} != ${CURRENT_HASH}"
        UPDATE_NEEDED="1"
    fi
elif [ ! -f "${HASH_STORE}" ] || [ ! -z "${CURRENT_HASH}" ]; then
    log_say "Script Repo Updater ${HASH_STORE} did not exist"
    UPDATE_NEEDED="1"
fi

if [[ "${UPDATE_NEEDED}" == "1" ]]; then
    log_say "Script Repo Update is needed from https://github.com/PrivateRouter-LLC/script-repo/raw/${REPO}/startup-scripts/startup.tar.gz"

    [ -f "/tmp/startup.tar.gz" ] && { 
        log_say "Script Repo Updater Removing old /tmp/startup.tar.gz"; 
        rm -rf /tmp/startup.tar.gz; 
    }

    # Download our startup.tar.gz with our startup scripts and load them in
    log_say "Downloading startup.tar.gz"
    while ! wget -O /tmp/startup.tar.gz "https://github.com/PrivateRouter-LLC/script-repo/raw/${REPO}/startup-scripts/startup.tar.gz" >/dev/null 2>&1; do
        log_say "... Waiting to download startup.tar.gz repo ..."
        sleep 1
    done
    # Verify it downloaded successfully
    if [ -f /tmp/startup.tar.gz ]; then
        log_say "Extracting startup.tar.gz"
        tar -xzf /tmp/startup.tar.gz -C /etc
        rm /tmp/startup.tar.gz
        log_say "Startup scripts updated."
        echo "${CURRENT_HASH}" > "${HASH_STORE}"
        log_say "Script Repo Updater Wrote ${CURRENT_HASH} > ${HASH_STORE}"
        #reboot
        # If we do not exit, it keeps going after the reboot command
        exit 1
    else
        log_say "We had a problem downloading the startup script update."
    fi
else
    log_say "Script Repo Update is not needed"
fi # UPDATE_NEEDED check

# ----------------------- END RC.CUSTOM UPDATER

# Check if there is an update to our rc.custom updater script
log_say "Beginning rc.custom up to date check"

HASH_STORE="/etc/config/.rc-custom"
TMP_DIR="/tmp/rc-custom"
GIT_URL="https://github.com/PrivateRouter-LLC/rc-custom"
UPDATER_LOCATION="/root/rc-custom"

CURRENT_HASH=$(
    curl \
        --silent "https://api.github.com/repos/PrivateRouter-LLC/rc-custom/commits/${REPO}" | \
        jq --raw-output '.sha'
)

if [ -f "${HASH_STORE}" ] && [ ! -z "${CURRENT_HASH}" ]; then
    log_say "RC Custom Updater Found ${HASH_STORE}"
    CHECK_HASH=$(cat ${HASH_STORE})
    log_say "RC Custom Updater Check Hash ${CHECK_HASH}"
    [[ "${CHECK_HASH}" != "${CURRENT_HASH}" ]] && {
        log_say "RC Custom ${CHECK_HASH} != ${CURRENT_HASH}"
        UPDATE_NEEDED="1"
    }
else
    log_say "RC Custom Updater ${HASH_STORE} did not exist"
    UPDATE_NEEDED="1"
fi

if [[ "${UPDATE_NEEDED}" == "1" || ! -d ${UPDATER_LOCATION} ]]; then
    log_say "RC Custom Updater Update is needed"

    [ -d "${TMP_DIR}" ] && {
        log_say "RC Custom Updater Cleaning temporary output ${TMP_DIR}"
        rm -rf "${TMP_DIR}"
    }

    log_say "RC Custom Updater Cloning ${GIT_URL} into ${TMP_DIR}"
    while ! git clone "${GIT_URL}" "${TMP_DIR}" >/dev/null 2>&1; do
        log_say "... Waiting to clone the rc.custom repo ..."
        sleep 1
    done
    # Verify it downloaded successfully
    if [ -d "${TMP_DIR}" ]; then
        log_say "RC Custom Updater Checking out ${CURRENT_HASH}"
        git -C "${TMP_DIR}" reset --hard "${CURRENT_HASH}"

        log_say "RC Custom Updater Cleaning up .git folder"
        rm -rf "${TMP_DIR}/.git"

        [ -d "${UPDATER_LOCATION}" ] && { 
            log_say "RC Custom Updater Removing old ${UPDATER_LOCATION}"; 
            rm -rf "${UPDATER_LOCATION}"; 
        }

        log_say "RC Custom Updater Moving ${TMP_DIR} to ${UPDATER_LOCATION}"
        mv "${TMP_DIR}" "${UPDATER_LOCATION}"

        echo "${CURRENT_HASH}" > "${HASH_STORE}"
        log_say "RC Custom Updater Wrote ${CURRENT_HASH} > ${HASH_STORE}"
    else
        log_say "We were not able to download our rc-custom scripts"
        #reboot
        exit 1
    fi
else
    log_say "RC Custom Updater Update is not needed"
fi # UPDATE_NEEDED check

[ -f "${UPDATER_LOCATION}/update.sh" ] && {
    log_say "RC Custom Updater running the commands in ${UPDATER_LOCATION}/update.sh."
    bash "${UPDATER_LOCATION}/update.sh" &
} || { log_say "Our update script, ${UPDATER_LOCATION}/update.sh did not exist, so it was not ran."; exit 1; }

exit 0
