#!/usr/bin/env bash
# PrivateRouter rc.custom for keeping everything up to date

# Log to the system log and echo if needed
log_say()
{
    SCRIPT_NAME=$(basename "$0")
    echo "${SCRIPT_NAME}: ${1}"
    logger "${SCRIPT_NAME}: ${1}"
}

# Perform the DNS resolution check
if ! nslookup "privaterouter.com" >/dev/null 2>&1; then
    log_say "Domain resolution failed. Setting DNS server to 1.1.1.1."

    # Update resolv.conf with the new DNS server
    echo "nameserver 1.1.1.1" > /etc/resolv.conf
else
    log_say "Domain resolution successful."
fi

# If nothing is set for REPO we set it to main
if [ -z "${REPO}" ]; then
    REPO="main"
fi

# Command to wait for Internet connection
wait_for_internet() {
    while ! ping -q -c3 1.1.1.1 >/dev/null 2>&1; do
        log_say "Waiting for Internet connection..."
        sleep 1
    done
    log_say "Internet connection established"
}

# Command to wait for opkg to finish
wait_for_opkg() {
  while pgrep -x opkg >/dev/null; do
    log_say "Waiting for opkg to finish..."
    sleep 1
  done
  log_say "opkg is released, our turn!"
}

# Wait for Internet connection
wait_for_internet
# Wait for opkg access
wait_for_opkg

# Check if there is an update to our rc.custom updater script
log_say "Beginning rc.custom up to date check"

HASH_STORE="/etc/config/.rc-custom"
TMP_DIR="/tmp/rc-custom"
GIT_URL="https://github.com/PrivateRouter-LLC/rc-custom"
UPDATER_LOCATION="/root/rc-custom"

CURRENT_HASH=$(
    curl \
        --silent https://api.github.com/repos/PrivateRouter-LLC/rc-custom/commits/${REPO} |
        jq --raw-output '.sha'
)

if [ -f "${HASH_STORE}" ]; then
    log_say "RC Custom Updater Found ${HASH_STORE}"
    CHECK_HASH=$(cat ${HASH_STORE})
    log_say "RC Custom Updater Check Hash ${CHECK_HASH}"
    [[ "${CHECK_HASH}" != "${CURRENT_HASH}" ]] && {
        log_say "RC Custom ${CHECK_HASH} != ${CURRENT_HASH}"
        UPDATE_NEEDED="1"
        echo "${CURRENT_HASH}" > "${HASH_STORE}"
        log_say "RC Custom Updater Wrote ${CURRENT_HASH} > ${HASH_STORE}"
    }
else
    log_say "RC Custom Updater ${HASH_STORE} did not exist"
    touch "${HASH_STORE}"
    echo "${CURRENT_HASH}" > "${HASH_STORE}"
    log_say "RC Custom Updater Wrote ${CURRENT_HASH} > ${HASH_STORE}"
    UPDATE_NEEDED="1"
fi

if [[ "${UPDATE_NEEDED}" == "1" || ! -d ${UPDATER_LOCATION} ]]; then
    log_say "RC Custom Updater Update is needed"

    [ -d "${TMP_DIR}" ] && {
        log_say "RC Custom Updater Cleaning temporary output ${TMP_DIR}"
        rm -rf "${TMP_DIR}"
    }

    log_say "RC Custom Updater Cloning ${GIT_URL} into ${TMP_DIR}"
    git clone --depth=1 "${GIT_URL}" "${TMP_DIR}"

    log_say "RC Custom Updater Cleaning up .git folder"
    rm -rf "${TMP_DIR}/.git"

    [ -d "${UPDATER_LOCATION}" ] && { log_say "RC Custom Updater Removing old ${UPDATER_LOCATION}"; rm -rf "${UPDATER_LOCATION}"; }

    log_say "RC Custom Updater Moving ${TMP_DIR} to ${UPDATER_LOCATION}"
    mv "${TMP_DIR}" "${UPDATER_LOCATION}"
else
    log_say "RC Custom Updater Update is not needed"
fi # UPDATE_NEEDED check

[ -f "${UPDATER_LOCATION}/update.sh" ] && {
    log_say "RC Custom Updater running the commands in ${UPDATER_LOCATION}/update.sh."
    bash "${UPDATER_LOCATION}/update.sh"
} || { log_say "Our update script, ${UPDATER_LOCATION}/update.sh failed to run"; exit 1; }

exit 0
